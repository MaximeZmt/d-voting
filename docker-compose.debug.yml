services:

  dela-worker-0:             # inital DELA leader node
    image: dela
    build:
      dockerfile: ./Dockerfiles/Dockerfile.dela.debug
    environment:
      PROXYKEY: ${PUBLIC_KEY}
      PROXYPORT: ${PROXYPORT}
      LLVL: debug
    volumes:
      - dela-worker-0-data:/data
    hostname: dela-worker-0
    ports:
      - 127.0.0.1:40000:40000
    security_opt:
      - apparmor:unconfined
    cap_add:
      - SYS_PTRACE
    networks:
      d-voting:
        ipv4_address: 172.19.0.255
  dela-worker-1:             # DELA worker node
    image: dela
    build:
      dockerfile: ./Dockerfiles/Dockerfile.dela.debug
    environment:
      PROXYKEY: ${PUBLIC_KEY}
      PROXYPORT: ${PROXYPORT}
      LLVL: debug
    volumes:
      - dela-worker-1-data:/data
    hostname: dela-worker-1
    ports:
      - 127.0.0.1:40001:40000
    security_opt:
      - apparmor:unconfined
    cap_add:
      - SYS_PTRACE
    networks:
      d-voting:
        ipv4_address: 172.19.0.254
  dela-worker-2:             # DELA worker node
    image: dela
    build:
      dockerfile: ./Dockerfiles/Dockerfile.dela.debug
    environment:
      PROXYKEY: ${PUBLIC_KEY}
      PROXYPORT: ${PROXYPORT}
      LLVL: debug
    volumes:
      - dela-worker-2-data:/data
    hostname: dela-worker-2
    ports:
      - 127.0.0.1:40002:40000
    security_opt:
      - apparmor:unconfined
    cap_add:
      - SYS_PTRACE
    networks:
      d-voting:
        ipv4_address: 172.19.0.253

  frontend:         # web service frontend
    image: frontend
    build:
      dockerfile: ./Dockerfiles/Dockerfile.frontend
    ports:
      - 127.0.0.1:3000:3000
    volumes:
      - ./web/frontend/src:/web/frontend/src
    environment:
      BACKEND_HOST: ${BACKEND_HOST}
      BACKEND_PORT: ${BACKEND_PORT}
    networks:
      d-voting:
        ipv4_address: 172.19.0.2

  backend:          # web service backend
    image: backend
    build:
      dockerfile: ./Dockerfiles/Dockerfile.backend
    environment:
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
      DB_PATH: /data/${DB_PATH}
      FRONT_END_URL: ${FRONT_END_URL}
      DELA_NODE_URL: ${DELA_NODE_URL}
      SESSION_SECRET: ${SESSION_SECRET}
      PUBLIC_KEY: ${PUBLIC_KEY}
      PRIVATE_KEY: ${PRIVATE_KEY}
    ports:
      - 127.0.0.1:5000:5000
      - 127.0.0.1:80:80
    depends_on:
      db:
        condition: service_started
    volumes:
      - backend-data:/data
      - ./web/backend/src:/web/backend/src
    networks:
      d-voting:
        ipv4_address: 172.19.0.3

  db:               # PostgreSQL database
    image: postgres:15
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./web/backend/src/migration.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      d-voting:
        ipv4_address: 172.19.0.4

volumes:
  postgres-data:    # PostgreSQL database
  dela-worker-0-data:
  dela-worker-1-data:
  dela-worker-2-data:
  backend-data:

networks:
  d-voting:
    ipam:
      config:
        - subnet: 172.19.0.0/16
          gateway: 172.19.0.1
